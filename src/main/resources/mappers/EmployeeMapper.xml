<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mappers.EmployeeMapper">
    <!--
        namespace:名称空间;指定为接口的全类名
        id：唯一标识
        resultType：返回值类型
        #{id}：从传递过来的参数中取出id值
    -->

    <!--
          Map<String, Object> getEmployeeByLastNameLikeReturnMap(String lastName);
    -->
    <select id="getEmployeeByLastNameLikeReturnMap" resultType="com.mybatis.beans.Employee">
        SELECT * FROM employee WHERE last_name LIKE #{lastName}
    </select>

    <!--
        List<Employee> getEmployeeByIdReturnMap(Integer id);
    -->
    <select id="getEmployeeByIdReturnMap" resultType="map">
        SELECT * FROM employee WHERE id = #{id}
    </select>

    <!--
        Employee getEmpsByLastNameLike(Integer id);
    -->
    <select id="getEmpsByLastNameLike" resultType="com.mybatis.beans.Employee">
        SELECT * FROM employee WHERE  last_name LIKE #{lastName}
    </select>

    <!--
        Employee getEmpByMap(Map<String, Object> map);
    -->
    <select id="getEmpByMap" resultType="com.mybatis.beans.Employee">
        SELECT * FROM ${employee} WHERE id=${id} AND last_name = ${lastName}
    </select>

    <!--
        Employee getEmpByIdAndLastName(@Param("id")Integer id, @Param("lastName")String lastName);
    -->
    <select id="getEmpByIdAndLastName" resultType="com.mybatis.beans.Employee">
        SELECT * FROM employee WHERE id = #{id} AND last_name = #{lastName}
    </select>

    <!--dandad-->
    <select id="getEmpById" resultType="com.mybatis.beans.Employee">
        select *
        from employee
        where id = #{id}
	</select>
    <!--
    <select id="getEmpById2" resultType="com.mybatis.beans.Employee">
            databaseId="mysql">
		select * from employee where id = #{id}
	</select>
    <select id="getEmpById3" resultType="com.mybatis.beans.Employee">
            databaseId="oracle">
		select EMPLOYEE_ID id,LAST_NAME	lastName,EMAIL email
		from employees where EMPLOYEE_ID=#{id}
	</select>-->


    <!-- parameterType：参数类型，可以省略，
    获取自增主键的值：
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
        useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <!--Long addEmployee(Employee employee);-->
    <!--
        测试 oracle 先把下面的注掉
    -->
    <insert id="addEmployee" parameterType="com.mybatis.beans.Employee"
    useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into employee(last_name,email,gender)
        values(#{lastName},#{email},#{gender})
    </insert>


    <!--
	    获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
    <!--<insert id="addEmployee" databaseId="oracle">
        &lt;!&ndash;
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         &ndash;&gt;
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            &lt;!&ndash; 编写查询主键的sql语句 &ndash;&gt;
            &lt;!&ndash; BEFORE&ndash;&gt;
            select EMPLOYEE_SEQ.nextval from dual
            &lt;!&ndash; AFTER：
                select EMPLOYEES_SEQ.currval from dual
             &ndash;&gt;
        </selectKey>

        &lt;!&ndash; 插入时的主键是从序列中拿到的 &ndash;&gt;
        &lt;!&ndash; BEFORE:&ndash;&gt;
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email&lt;!&ndash; ,jdbcType=NULL &ndash;&gt;})
        &lt;!&ndash; AFTER：
            insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
            values(employees_seq.nextval,#{lastName},#{email})
        &ndash;&gt;
    </insert>-->

    <!--  Boolean updateEmployee(Employee employee);  -->
    <update id="updateEmployee">
		update employee
		set last_name=#{lastName},email=#{email},gender=#{gender}
		where id=#{id}
	</update>

    <!-- void deleteEmployeeById(Integer id); -->
    <delete id="deleteEmployeeById">
		delete from employee where id=#{id}
	</delete>
</mapper>
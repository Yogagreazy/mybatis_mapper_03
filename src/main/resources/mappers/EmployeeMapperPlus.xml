<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mappers.EmployeeMapperPlus">

    <!--
         Employee getEmployeeByIdStep(Integer id);
    -->

    <!--
        自定义 javabean
        type：自定义 java 类型
        id：唯一id方便引用
    -->
    <resultMap id="MySimpleEmp" type="com.mybatis.beans.Employee">
        <!--
            指定主键的封装规则
            id定义主键会有底层优化
            column：指定对应的 javabean属性
        -->
        <id column="id" property="id"></id>
        <!--
            定义普通列的封装规则
        -->
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>
    </resultMap>

    <!--
        Employee getEmployeeById(Integer id);
    -->
    <select id="getEmployeeById" resultMap="MySimpleEmp">
        SELECT *
        FROM employee
        WHERE id = #{id}
    </select>

    <!--
        场景一：
            查询员工 Employee 时将部门信息返回
            Employee === Department

            如下：
            Employee（id，last_name,email,gender）;Dept(dept_id,dept_name,)
    -->
    <!--
		联合查询：级联属性封装结果集
    -->
    <resultMap id="MyDifEmp" type="com.mybatis.beans.Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>

        <!--
            封装部门属性
        -->
        <result column="dept_id" property="dept.id"></result>
        <result column="dept_name" property="dept.departmentName"></result>
    </resultMap>


    <!--
        使用 association 自定义封装单个对象
    -->
    <resultMap id="MyDifEmp2" type="com.mybatis.beans.Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>

        <!--
            association 可以指定联合的 javabean 对象
            properties 指定那个属性的联合对象
            javaType:指定这个属性对象的类型
        -->
        <association property="dept" javaType="com.mybatis.beans.Department">
            <id column="id" property="id"></id>
            <result column="department_name" property="departmentName"></result>
        </association>

    </resultMap>

    <!--
        Employee getEmployeeAndDept(Integer id);
    -->
    <select id="getEmployeeAndDept" resultMap="MyDifEmp">
        SELECT e.id        id,
               e.last_name last_name,
               e.gender    gender,
               e.d_id      d_id,
               d.id        did,
               d.dept_name dept_name
        FROM tb_employee e,
             tb_dept d
        WHERE e.d_id = d.id
          AND e.id = #{id}
    </select>

    <!--
        使用association进行分步查询
            1、先按员工id查询员工信息
            2、根据查询员工信息的 id 值去获取部门信息
            3、部门设置到员工中

    -->

    <!--
        ID last_name email gender dept_id ...
    -->
    <resultMap type="com.mybatis.beans.Employee" id="MyEmpByStep">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>

        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
        -->
        <association property="dept" select="com.mybatis.mappers.DepartmentMapper.getDeptById"
                     column="dept_id"></association>
    </resultMap>

    <!--
         Employee getEmployeeByIdStep(Integer id);
    -->
    <select id="getEmployeeByIdStep" resultMap="MyEmpByStep">
        SELECT * FROM employee WHERE id = #{id}
        <if test="_parameter != null">
            AND 1=1
        </if>
    </select>

    <!-- 可以使用延迟加载（懒加载）；(按需加载)
        Employee==>Dept：
            我们每次查询Employee对象的时候，都将一起查询出来。
            部门信息在我们使用的时候再去查询；
            分段查询的基础之上加上两个配置：
     -->
    <!-- ==================association============================ -->
    <!--
       场景二：
           查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
        -->
    <!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
    <select id="getEmployeeByDeptId" resultType="com.mybatis.beans.Employee">
        SELECT *
        FROM employee
        WHERE d_id = #{deptId}
    </select>

    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap id="MyEmpDis" type="com.mybatis.beans.Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>

        <!--
            column：指定判定的列名
	 		javaType：列值对应的java类型
        -->
        <discriminator javaType="String" column="gender">
            <!--
                女生  resultType:指定封装的结果类型；不能缺少。
            -->
            <case value="0" resultType="com.mybatis.beans.Employee">
                <association property="dept" select="com.mybatis.mappers.DepartmentMapper.getDeptById" column="dept_id">
                </association>
            </case>
            <!--
                男生 ;如果是男生，把last_name这一列的值赋值给email;
            -->
            <case value="1" resultType="com.mybatis.beans.Employee">
                <!--<association property="dept" select="com.mybatis.mapperspers.DepartmentMapper.getDeptById" column="dept_id">-->
                <!---->
                <!--</association>-->

                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>